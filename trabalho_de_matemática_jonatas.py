# -*- coding: utf-8 -*-
"""Trabalho de Matemática - Jonatas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NdVsZuJV86W8wD7X3JZ9aT45TEwzxl_8
"""

import time
import matplotlib.pyplot as plt 
import numpy as np

i = 0
lista = []
t = []
tt = []

#Contas manuais
def Calcular2x2():
    resultado = lista[0]*lista[3] - lista[1]*lista[2]
    return resultado

def Calcular3x3():
    resultado = (lista[0]*lista[4]*lista[8]
                 + lista[1]*lista[5]*lista[6] 
                 + lista[2]*lista[3]*lista[7]) - (lista[2]*lista[4]*lista[6] 
                 + lista[0]*lista[5]*lista[7] 
                 + lista[1]*lista[3]*lista[8])
    return resultado

def Calcular4x4():
    resultado = (lista[0]*lista[5]*lista[10]*lista[15]) - (lista[0]*lista[5]*lista[11]*lista[14]) - (lista[0]*lista[6]*lista[9]*lista[15]) 
    + (lista[0]*lista[6]*lista[11]*lista[13]) 
    + (lista[0]*lista[7]*lista[9]*lista[14]) - (lista[0]*lista[7]*lista[10]*lista[13]) - (lista[1]*lista[4]*lista[10]*lista[15]) 
    + (lista[1]*lista[4]*lista[11]*lista[14]) 
    + (lista[1]*lista[6]*lista[8]*lista[15]) - (lista[1]*lista[6]*lista[11]*lista[12]) - (lista[1]*lista[7]*lista[8]*lista[14]) 
    + (lista[1]*lista[7]*lista[10]*lista[12]) 
    + (lista[2]*lista[4]*lista[9]*lista[15]) - (lista[2]*lista[4]*lista[11]*lista[13]) - (lista[2]*lista[5]*lista[8]*lista[15]) 
    + (lista[2]*lista[5]*lista[11]*lista[12]) 
    + (lista[2]*lista[7]*lista[8]*lista[13]) - (lista[2]*lista[7]*lista[9]*lista[12]) - (lista[3]*lista[4]*lista[9]*lista[14]) 
    + (lista[3]*lista[4]*lista[10]*lista[13]) 
    + (lista[3]*lista[5]*lista[8]*lista[14]) - (lista[3]*lista[5]*lista[10]*lista[12]) - (lista[3]*lista[6]*lista[8]*lista[13]) 
    + (lista[3]*lista[6]*lista[9]*lista[12])
    return resultado

#Exibir Matrizes
def Exibir2x2():
    return print(f"\nEssa é sua matriz 2x2: \n({lista[0]}  {lista[1]})",
                  f"\n({lista[2]}  {lista[3]})")
def Exibir3x3():
    return print(f"\nEssa é sua matriz 3x3: \n({lista[0]}  {lista[1]}  {lista[2]}  |{lista[0]}  {lista[1]})",
          f"\n({lista[3]}  {lista[4]}  {lista[5]}  |{lista[3]}  {lista[4]})",
          f"\n({lista[6]}  {lista[7]}  {lista[8]}  |{lista[6]}  {lista[7]})")

def Exibir4x4():
    return print(f"\nEssa é sua matriz 4x4: \n({lista[0]}  {lista[1]}  {lista[2]}  {lista[3]})",
          f"\n({lista[4]}  {lista[5]}  {lista[6]}  {lista[7]})",
          f"\n({lista[8]}  {lista[9]}  {lista[10]}  {lista[11]})",
          f"\n({lista[12]}  {lista[13]}  {lista[14]}  {lista[15]})")
    
#F Exibir Grafico
def Grafico(t):
        if i == -1:
            for x in range (0,3):
                plt.bar(f"{x+2}x{x+2}*",tt,fc = "royalblue", ec = "black")
            for x in range(0,8):
                plt.bar(f"{x+2}x{x+2}",t,fc = "navy", ec = "black")
            plt.title('Tempo de execução Vs Tamanho da Matriz')
            plt.xlabel("Matrizes (* = Manual)")
            plt.ylabel("Tempo")
            plt.show() 
        else:
            for x in range(0,len(t)):
                plt.bar(f"{x+escolha}x{x+escolha}",t[x],fc = "darkslateblue", ec = "black")
            plt.title('Tempo de execução Vs Tamanho da Matriz')
            plt.xlabel("Matrizes")
            plt.ylabel("Tempo")
            plt.show() 
#F Matriz
def Matriz(lista):
    for x in range(0,i):
       try:
           lista.append(input(f"Digito de número {x+1} da Matriz: "))
           lista = [float(i) for i in lista]
       except ValueError:
           print("\nPor favor insira apenas números.\n")  
           break
    return lista

#F Determinante
def Deter():
    print(f"\nO Determinante da sua matriz é: {resultado: 2.2f}")
    t2 = time.perf_counter_ns()
    t.append(t2 - t1) 
    print(f"O código demorou {t} ms") 
    return tt 
    
print("\n1 - Matrizes 2x2 até 9x9 com números aleatórios(Com e sem Numpy)\n2 - Matriz 2x2 (Manual e sem Numpy)\n3 - Matriz 3x3 (Manual e sem Numpy)\n4 - Matriz 4x4 (Manual e sem Numpy)")

while i == 0:
    try:
        escolha = int(input("Escolha o tipo de matriz que iremos calcular: ")) 
#Escolha 2 - 2X2
        if escolha == 2 :
            print("\nVocê escolheu uma matriz 2x2 \n(1  2)\n(3  4)")
            i = 4
            lista = Matriz(lista)
            Exibir2x2()
            t1 = time.perf_counter_ns()
            resultado = Calcular2x2()
            tt = Deter()
            Grafico(t)
#Escolha 3 - 3X3
        elif escolha == 3:
            print("\nVocê escolheu uma matriz 3x3 \n(1  2  3)\n(4  5  6)\n(7  8  9)")
            i = 9
            lista = Matriz(lista)
            Exibir3x3()
            t1 = time.perf_counter_ns()
            resultado = Calcular3x3()
            tt = Deter()
            Grafico(t)
#Escolha 4 - 4X4
        elif escolha == 4:
            print("\nVocê escolheu uma matriz 4x4 \n(1   2   3   4)\n(5   6   7   8)\n(9  10  11  12)\n(13 14  15  16)")
            i = 16
            lista = Matriz(lista)
            Exibir4x4()
            t1 = time.perf_counter_ns()
            resultado = Calcular4x4()
            tt = Deter()
            Grafico(t)
#Escolha 1 - Automatico -2x2 a 9x9
        elif escolha == 1: 
            i = -1
            
            lista = [1,2,0,3,4,5,6,7,8,9,6,4,2,7,5,9]
            lista = [float(i) for i in lista]
            
            #2x2
            Exibir2x2()
            t1 = time.perf_counter_ns()
            resultado = Calcular2x2()
            t2 =time.perf_counter_ns()
            tt.append(t2 - t1)
            print(f"\nO Determinante da sua matriz 2x2 é: {resultado: 2.2f}")
            
            #3x3
            Exibir3x3()
            t1 = time.perf_counter_ns()
            resultado = Calcular3x3()
            t2 =time.perf_counter_ns()
            tt.append(t2 - t1)
            print(f"\nO Determinante da sua matriz 3x3 é: {resultado: 2.2f}")
            
            #4x4
            Exibir4x4()
            t1 = time.perf_counter_ns()
            resultado = Calcular4x4()
            t2 = time.perf_counter_ns()
            tt.append(t2 - t1)
            print(f"\nO Determinante da sua matriz 4x4 é: {resultado: 2.2f}")
            
            #2x2CN
            print("\nEssa é sua matriz 2x2: ")
            matrix = np.random.randint(-10,10,size=(2,2))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 2x2 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            #3x3CN
            print("\nEssa é sua matriz 3x3: ")
            matrix = np.random.randint(-10,10,size=(3,3))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 3x3 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
               
            #4x4CN
            print("\nEssa é sua matriz 4x4: ")
            matrix = np.random.randint(-10,10,size=(4,4))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 4x4 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            #5x5CN
            print("\nEssa é sua matriz 5x5: ")
            matrix = np.random.randint(-10,10,size=(5,5))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 5x5 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            #6x6CN
            print("\nEssa é sua matriz 6x6: ")
            matrix = np.random.randint(-10,10,size=(6,6))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 6x6 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            #7x7CN
            print("\nEssa é sua matriz 7x7: ")
            matrix = np.random.randint(-10,10,size=(7,7))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 7x7 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            #8x8CN
            print("\nEssa é sua matriz 8x8: ")
            matrix = np.random.randint(-10,10,size=(8,8))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 8x8 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            #9x9CN
            print("\nEssa é sua matriz 9x9: ")
            matrix = np.random.randint(-10,10,size=(9,9))
            print(matrix) 
            t1 = time.perf_counter_ns()
            print(f"\nO Determinante da sua matriz 9x9 é: {(np.linalg.det(matrix)): 2.2f}")   
            t2 = time.perf_counter_ns()
            t.append(t2 - t1)
            
            Grafico(t)
#Erro < 0 ou >= 5
        elif escolha <= 0 or escolha >= 5: 
            print("Por favor apenas insira números que estejam entre 1 e 4.\n") 
            continue
#Erro Letras
    except ValueError:
            print("Por favor insira apenas números.\n")
            continue